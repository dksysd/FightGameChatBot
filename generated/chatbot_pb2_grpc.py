# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import chatbot_pb2 as chatbot__pb2

GRPC_GENERATED_VERSION = '1.73.0rc1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in chatbot_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CharacterChatServiceStub(object):
    """캐릭터 채팅 서비스
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitSession = channel.unary_unary(
                '/chatbot.CharacterChatService/InitSession',
                request_serializer=chatbot__pb2.InitSessionRequest.SerializeToString,
                response_deserializer=chatbot__pb2.InitSessionResponse.FromString,
                _registered_method=True)
        self.Chat = channel.unary_unary(
                '/chatbot.CharacterChatService/Chat',
                request_serializer=chatbot__pb2.ChatRequest.SerializeToString,
                response_deserializer=chatbot__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.AnalyzeGameState = channel.unary_unary(
                '/chatbot.CharacterChatService/AnalyzeGameState',
                request_serializer=chatbot__pb2.AnalysisRequest.SerializeToString,
                response_deserializer=chatbot__pb2.AnalysisResponse.FromString,
                _registered_method=True)
        self.EndSession = channel.unary_unary(
                '/chatbot.CharacterChatService/EndSession',
                request_serializer=chatbot__pb2.EndSessionRequest.SerializeToString,
                response_deserializer=chatbot__pb2.EndSessionResponse.FromString,
                _registered_method=True)
        self.ListSessions = channel.unary_unary(
                '/chatbot.CharacterChatService/ListSessions',
                request_serializer=chatbot__pb2.ListSessionsRequest.SerializeToString,
                response_deserializer=chatbot__pb2.ListSessionsResponse.FromString,
                _registered_method=True)
        self.StreamChat = channel.stream_stream(
                '/chatbot.CharacterChatService/StreamChat',
                request_serializer=chatbot__pb2.ChatRequest.SerializeToString,
                response_deserializer=chatbot__pb2.ChatResponse.FromString,
                _registered_method=True)


class CharacterChatServiceServicer(object):
    """캐릭터 채팅 서비스
    """

    def InitSession(self, request, context):
        """세션 초기화
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Chat(self, request, context):
        """채팅 대화
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeGameState(self, request, context):
        """게임 상태 분석
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndSession(self, request, context):
        """세션 종료
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSessions(self, request, context):
        """활성 세션 목록 조회
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChat(self, request_iterator, context):
        """스트림 채팅 (실시간)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CharacterChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitSession': grpc.unary_unary_rpc_method_handler(
                    servicer.InitSession,
                    request_deserializer=chatbot__pb2.InitSessionRequest.FromString,
                    response_serializer=chatbot__pb2.InitSessionResponse.SerializeToString,
            ),
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=chatbot__pb2.ChatRequest.FromString,
                    response_serializer=chatbot__pb2.ChatResponse.SerializeToString,
            ),
            'AnalyzeGameState': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeGameState,
                    request_deserializer=chatbot__pb2.AnalysisRequest.FromString,
                    response_serializer=chatbot__pb2.AnalysisResponse.SerializeToString,
            ),
            'EndSession': grpc.unary_unary_rpc_method_handler(
                    servicer.EndSession,
                    request_deserializer=chatbot__pb2.EndSessionRequest.FromString,
                    response_serializer=chatbot__pb2.EndSessionResponse.SerializeToString,
            ),
            'ListSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSessions,
                    request_deserializer=chatbot__pb2.ListSessionsRequest.FromString,
                    response_serializer=chatbot__pb2.ListSessionsResponse.SerializeToString,
            ),
            'StreamChat': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamChat,
                    request_deserializer=chatbot__pb2.ChatRequest.FromString,
                    response_serializer=chatbot__pb2.ChatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chatbot.CharacterChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chatbot.CharacterChatService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CharacterChatService(object):
    """캐릭터 채팅 서비스
    """

    @staticmethod
    def InitSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chatbot.CharacterChatService/InitSession',
            chatbot__pb2.InitSessionRequest.SerializeToString,
            chatbot__pb2.InitSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chatbot.CharacterChatService/Chat',
            chatbot__pb2.ChatRequest.SerializeToString,
            chatbot__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeGameState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chatbot.CharacterChatService/AnalyzeGameState',
            chatbot__pb2.AnalysisRequest.SerializeToString,
            chatbot__pb2.AnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EndSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chatbot.CharacterChatService/EndSession',
            chatbot__pb2.EndSessionRequest.SerializeToString,
            chatbot__pb2.EndSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chatbot.CharacterChatService/ListSessions',
            chatbot__pb2.ListSessionsRequest.SerializeToString,
            chatbot__pb2.ListSessionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/chatbot.CharacterChatService/StreamChat',
            chatbot__pb2.ChatRequest.SerializeToString,
            chatbot__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HealthStub(object):
    """Health Service - 서비스 상태 관리
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Check = channel.unary_unary(
                '/chatbot.Health/Check',
                request_serializer=chatbot__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=chatbot__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.Watch = channel.unary_stream(
                '/chatbot.Health/Watch',
                request_serializer=chatbot__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=chatbot__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class HealthServicer(object):
    """Health Service - 서비스 상태 관리
    """

    def Check(self, request, context):
        """단일 health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Watch(self, request, context):
        """스트리밍 health check (선택사항)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HealthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=chatbot__pb2.HealthCheckRequest.FromString,
                    response_serializer=chatbot__pb2.HealthCheckResponse.SerializeToString,
            ),
            'Watch': grpc.unary_stream_rpc_method_handler(
                    servicer.Watch,
                    request_deserializer=chatbot__pb2.HealthCheckRequest.FromString,
                    response_serializer=chatbot__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chatbot.Health', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chatbot.Health', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Health(object):
    """Health Service - 서비스 상태 관리
    """

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chatbot.Health/Check',
            chatbot__pb2.HealthCheckRequest.SerializeToString,
            chatbot__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Watch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/chatbot.Health/Watch',
            chatbot__pb2.HealthCheckRequest.SerializeToString,
            chatbot__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
